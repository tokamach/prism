# -*- olivetti-body-width: 94; -*-
* Visual Novel engine in c++
* Parsing
** Create lexer for script
Tokenize script into Vector or List of Tokens, containing metadata like line number as well
** Create parser for lexed script
Simple Finite State Automaton should be fine, as the script format currently does not allow nested labels and will not need to be a Pushdown Automaton or LL(1) parser.

* Script
- script begins with a setup block, where speakers are defined
- followed by individually labeled sections
- setup keywords must be within setup block
- all non setup keywords must be contained within a labeled section

** TODO BNF 
** Keywords
In addition to the setup/main distinction of keywords, they can also be split between graphical and logical operations. Logical operations will only affect the internal state of the ScriptVM, whilst graphical operations will have a visual effect onscreen

|---------+-------+-------------------+-----------------------------------------------------|
| Keyword | args  | type              | description                                         |
|---------+-------+-------------------+-----------------------------------------------------|
| speaker | x y z | setup/logical     | Set a speaker alias x , with full name y and colour |
| var     | x &y  | setup/logical     | Initialize variable X with optional value Y         |
| set     | x y   | logical           | Set global x to string y                            |
| bg      | x     | graphical         | Set the background image to x (see image paths)     |
| show    | x     | graphical         | Show Image x (see image paths)                      |
| menu    | x y   | graphical/logical | Show a menu options x to jump to labels y           |
| jump    | x     | logical           | Jump to label X                                     |
| if      | x &y  | logical           | conditional statement on global var, see if section |
| fin     | x     | logical           | End VN, showing text x                              |

Internally any "setup" keywords (speaker, var) are stripped on inital parse, leaving only the statements.

*** menu keyword
the menu keyword is followed by 2 or more pairs consisting of a string and label. These are contained within square brackets, and seperated internally by a pipe '|' character. As below:
: [option text | label]
When the user selects an option, the label will be jumped to.

** Example short script
#+BEGIN_EXAMPLE
setup
{
    speaker a A blue
    speaker b B red
    var ret
}

good
{

}

bad
{

}

main
{
   bg room
   show a/normal
   a Hi there friend.

   show b/normal
   b What's up my dude.

   menu [All good my G. | good]
        [Not so good my man. | bad]
}
#+END_EXAMPLE

* Architecture
** Script VM
Prism can be viewed as an interpreter for the Prism Script language. It's only state is the global variables based on user decisions, and the current position in the script itself.

The ScriptVM class performs the tasks that the prism main loop would do, but headless

** Main loop
1. Iterate to next item in script
2. Parse script command (show image, show text, show menu)
3. (optional) Accept user input from menu
4. Perform relevant action, whether logical or graphical

* Util
** Write utility to convert to Prismscript from other formats, such as Ren'Py
