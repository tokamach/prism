# -*- olivetti-body-width: 94; -*-
* Visual Novel engine in c++
* MAJOR TODOS
- implement if in parse and lex
- allow multiline speech in lexer
- tests
- implement script VM
- implement graphics

* Parlex
** Lexer
The lexer is rather smart in order to accurately tag all tokens without ambiguity, keeping track of Scope, Speakers, and vars.
** Parser
- Simple Finite State Automaton should be fine, as the script format currently does not allow nested labels and will not need to be a Pushdown Automaton or LL(1) parser.
- Or go all out and do an RDP

- future notes for yourself
  - rather than using an explicit stack to store program state like in the lexer you've decided to use recursive fnuctions, as in a recursive descent parser. ideally the stack should more than accomodate for this, but I guess change it if it doesn't work
  - menu is a bitch:
    allow for multiple options
    use node block to store text/label combos!
    use A-Z for text/label combo names
    this allows for 26 max

* VM
Prism can be viewed as an interpreter for the Prism Script language. It's only variable state is the global variables based on user decisions, and the current position in the script itself.

** Pseudocode
- read setup section
  - add speaker to char name table
  - add variables to var table

- read main section
  - determine current node keyword type
    - dispatch logical or graphical to either VM or game
      - logical: update internal state
      - graphical: perform action
	
* Script Format
- script begins with a setup block, where speakers are defined
- followed by individually labeled sections
- setup keywords must be within setup block
- must contain a "main" section
- all non setup keywords must be contained within a labeled section

** Keywords
In addition to the setup/main distinction of keywords, they can also be split between graphical and logical operations. Logical operations will only affect the internal state of the ScriptVM, whilst graphical operations will have a visual effect onscreen

|---------+-------+-------------------+-----------------------------------------------------|
| Keyword | args  | type              | description                                         |
|---------+-------+-------------------+-----------------------------------------------------|
| speaker | x y z | setup/logical     | Set a speaker alias x , with full name y and colour |
| var     | x &y  | setup/logical     | Initialize variable X with optional value Y         |
| set     | x y   | logical           | Set global x to string y                            |
| bg      | x     | graphical         | Set the background image to x (see image paths)     |
| show    | x     | graphical         | Show Image x (see image paths)                      |
| menu    | x y   | graphical/logical | Show a menu options x to jump to labels y           |
| jump    | x     | logical           | Jump to label X                                     |
| if      | x &y  | logical           | conditional statement on global var, see if section |
| fin     | x     | logical           | End VN, showing text x                              |

*** Keyword arg names
|---------------+------------------|
| Keyword       | arg names        |
|---------------+------------------|
| speaker setup | alias name color |
| speaker       | name speech      |
| var           | name             |
| set           | var val          |
| bg            | path             |
| show          | path             |
| menu          |                  |
| jump          | target           |
| if            |                  |
| fin           | message          |

Internally any "setup" keywords (speaker, var) are stripped on inital parse, leaving only the statements.

*** menu keyword
the menu keyword is followed by 2 or more pairs consisting of a string and label. These are contained within square brackets, and seperated internally by a pipe '|' character. As below:
: [text | label]
When the user selects an option, the label will be jumped to.

** Example short script
#+BEGIN_EXAMPLE
setup
{
    speaker a A blue
    speaker b B red
    var ret
}

good
{
  show b/happy
  b Good to hear.
  fin Congrats
}

bad
{
  show b/sad
  b Shame my guy.
  fin RIP u
}

main
{
   bg room
   show a/normal
   a Hi there friend.

   show b/normal
   b What's up my dude.

   menu [All good my G. | good]
        [Not so good my man. | bad]
}
#+END_EXAMPLE

